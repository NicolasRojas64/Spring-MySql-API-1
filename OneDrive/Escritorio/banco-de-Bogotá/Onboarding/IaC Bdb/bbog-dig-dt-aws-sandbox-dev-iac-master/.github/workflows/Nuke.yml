# Este flujo de trabajo implementa un nuke en la cuenta sandbox de Lab Digital
name: "Nuke and Create Sandbox"

on:
  push: 
    branches: [master]
  schedule:
    - cron:  '59 23 * * 6'
  workflow_dispatch:

jobs:
  nuke:
    name: "Nuke"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Instala Go
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21.0"

      - name: Setup tools
        run: |
          go install golang.org/x/lint/golint@latest

      #- Descarga aws nuke
      - name: Compilar aws-nuke
        run: |
          wget https://github.com/rebuy-de/aws-nuke/archive/refs/tags/v2.24.2.zip
          unzip v2.24.2.zip
          cd aws-nuke-2.24.2
          go build

      # Ejecuta el nuke
      - name: Ejecuta nuke
        run: ./aws-nuke-2.24.2/aws-nuke -c nuke/nuke-config.yaml --force --access-key-id  "$NUKE_AWS_ACCOUNT_ID" --secret-access-key  "$NUKE_AWS_ACCESS_SECRET" -q --no-dry-run

      - name: Re run if failed
        if: ${{ failure() }}
        run: ./aws-nuke-2.24.2/aws-nuke -c nuke/nuke-config.yaml --force --access-key-id  "$NUKE_AWS_ACCOUNT_ID" --secret-access-key  "$NUKE_AWS_ACCESS_SECRET" -q --no-dry-run
  
  
  terraform:
    needs: nuke
    name: "Create with Terraform"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3

      - name: Configure Git permissions
        run: |
          git config --local --remove-section http."https://github.com/"
          git config --global url."https://${DIG_READER_GITHUB_USER}:${DIG_READER_GITHUB_ACCESS_TOKEN}@github.com/bancodebogota".insteadOf "https://github.com/bancodebogota"
        env:
          DIG_READER_GITHUB_USER: ${{ secrets.DIG_READER_GITHUB_USER }}
          DIG_READER_GITHUB_ACCESS_TOKEN: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}

        # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt --recursive -check

      - name: Terraform Init
        run: terraform init

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
